import 'package:onsite/models/task.dart';

List<Task> dummyTasks = [
  Task(
    id: '1',
    name: 'Task 1',
    projectId: '101',
    status: Status.pending,
    validationType: ValidationType.file,
    endTime: DateTime.now().add(const Duration(days: 5)),
    startTime: DateTime.now(),
    deadline: DateTime.now().add(const Duration(days: 10)),
    priority: Priority.medium,
  ),
  Task(
    id: '2',
    name: 'Task 2',
    projectId: '102',
    status: Status.done,
    validationType: ValidationType.picture,
    endTime: DateTime.now().subtract(const Duration(days: 2)),
    startTime: DateTime.now().subtract(const Duration(days: 5)),
    deadline: DateTime.now().add(const Duration(days: 7)),
    priority: Priority.low,
  ),
  Task(
    id: '3',
    name: 'Task 3',
    projectId: '101',
    status: Status.pending,
    validationType: ValidationType.none,
    endTime: DateTime.now().add(const Duration(days: 3)),
    startTime: DateTime.now().subtract(const Duration(days: 3)),
    deadline: DateTime.now().add(const Duration(days: 8)),
    priority: Priority.low,
  ),
  Task(
    id: '4',
    name: 'Task 4',
    projectId: '103',
    status: Status.done,
    validationType: ValidationType.picture,
    endTime: DateTime.now().subtract(const Duration(days: 1)),
    startTime: DateTime.now().subtract(const Duration(days: 4)),
    deadline: DateTime.now().add(const Duration(days: 6)),
    priority: Priority.high,
  ),
  Task(
    id: '5',
    name: 'Task 5',
    projectId: '102',
    status: Status.pending,
    validationType: ValidationType.file,
    endTime: DateTime.now().add(const Duration(days: 6)),
    startTime: DateTime.now().subtract(const Duration(days: 2)),
    deadline: DateTime.now().add(const Duration(days: 12)),
    priority: Priority.low,
  ),
  Task(
    id: '6',
    name: 'Task 6',
    projectId: '104',
    status: Status.done,
    validationType: ValidationType.picture,
    endTime: DateTime.now().subtract(const Duration(days: 3)),
    startTime: DateTime.now().subtract(const Duration(days: 7)),
    deadline: DateTime.now().add(const Duration(days: 5)),
    priority: Priority.high,
  ),
  Task(
    id: '7',
    name: 'Task 7',
    projectId: '103',
    status: Status.pending,
    validationType: ValidationType.none,
    endTime: DateTime.now().add(const Duration(days: 7)),
    startTime: DateTime.now().subtract(const Duration(days: 1)),
    deadline: DateTime.now().add(const Duration(days: 14)),
    priority: Priority.low,
  ),
  Task(
    id: '8',
    name: 'Task 8',
    projectId: '102',
    status: Status.done,
    validationType: ValidationType.file,
    endTime: DateTime.now().subtract(const Duration(days: 5)),
    startTime: DateTime.now().subtract(const Duration(days: 10)),
    deadline: DateTime.now().add(const Duration(days: 4)),
    priority: Priority.medium,
  ),
  Task(
    id: '9',
    name: 'Task 9',
    projectId: '101',
    status: Status.pending,
    validationType: ValidationType.picture,
    endTime: DateTime.now().add(const Duration(days: 2)),
    startTime: DateTime.now().subtract(const Duration(days: 6)),
    deadline: DateTime.now().add(const Duration(days: 9)),
    priority: Priority.medium,
  ),
  Task(
    id: '10',
    name: 'Task 10',
    projectId: '104',
    status: Status.done,
    validationType: ValidationType.file,
    endTime: DateTime.now().subtract(const Duration(days: 4)),
    startTime: DateTime.now().subtract(const Duration(days: 8)),
    deadline: DateTime.now().add(const Duration(days: 3)),
    priority: Priority.low,
  ),
];
